#!/usr/bin/env node

const debug = require('debug')('meta-jest');
const getMetaFile = require('get-meta-file');
const loop = require('loop');
const path = require('path');
const fs = require('fs');

if (process.argv[2] === '--help') {
  return console.log('meta jest <jest arguments...>');
}

const meta = getMetaFile();
if (!meta) process.exit(1);

const projects = meta.projects;
const folders = Object.keys(projects).map(folder => {
  return path.resolve(folder);
});

filteredFolders = folders.filter(folder => {
  // see if the folder contains a jest.config.js file
  const folderExists = fs.existsSync(folder);
  if (!folderExists) return false;

  debug("Looking for jest.config.js");
  jestConfigPath = path.join(folder, 'jest.config.js');
  debug(jestConfigPath);
  const jestConfigFileExists = fs.existsSync(jestConfigPath);
  if (jestConfigFileExists) {
    debug("Found jest.config.js");
    return true;
  } else {
    debug("Did not find jest.config.js");
  }

  debug("Looking for jest config in package.json");
  const packageJsonPath = path.join(folder, 'package.json');
  debug(packageJsonPath);
  const packageJsonFileExists = fs.existsSync(packageJsonPath);
  if (packageJsonFileExists) {
    debug("Found package.json");
  } else {
    debug("Did not find package.json");
    return false
  }


  debug("Reading package.json");
  try {
    const raw = fs.readFileSync(packageJsonPath, 'utf8');
    const contents = JSON.parse(raw);
    if (contents && contents.jest) {
      debug("Found Jest config package.json");
      return true
    } else {
      debug("Did not find Jest config package.json");
      return false
    }
  } catch (err) {
    debug("Did not find Jest config package.json");
    return false
  }

});

loop({
  command: `jest ${process.argv.slice(2).join(' ')}`,
  directories: filteredFolders.sort(),
});
